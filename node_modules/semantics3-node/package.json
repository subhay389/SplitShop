{
  "name": "semantics3-node",
  "description": "Node.js library bindings for the Semantics3 APIs.",
  "version": "0.0.3",
  "main": "./lib/main",
  "dependencies": {
    "normalize-url": "^1.3.0",
    "oauth": "0.9.8"
  },
  "author": {
    "name": "Sivamani Varun",
    "email": "varun@semantics3.com"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/Semantics3/semantics3-node.git"
  },
  "engine": "node >= 0.6.0",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/Semantics3/semantics3-node/raw/master/LICENSE"
    }
  ],
  "readme": "# semantics3-node\n\nsemantics3-node is a Node client for accessing the Semantics3 Products API, which provides structured information for a large number of products.\nSee https://www.semantics3.com for more information.\n\nAPI documentation can be found at https://www.semantics3.com/docs/\n\n## Installation\n\nsemantics3-node can be installed through the npm:\n```\n$ npm install semantics3-node\n```\nTo build and install from the latest source:\n```\n$ git clone git@github.com:Semantics3/semantics3-node.git\n$ npm install semantics3-node/\n```\n\n## Requirements\n\n* oauth\n\n## Getting Started\n\nIn order to use the client, you must have both an API key and an API secret. To obtain your key and secret, you need to first create an account at\nhttps://www.semantics3.com/\nYou can access your API access credentials from the user dashboard at https://www.semantics3.com/dashboard/applications\n\n### Setup Work\n\nLet's lay the groundwork.\n\n```javascript\nvar api_key = 'SEM3xxxxxxxxxxxxxxxxxxxxxx';\nvar api_secret = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx';\nvar sem3 = require('semantics3-node')(api_key,api_secret);\n```\n\n### First Request aka 'Hello World':\n\nLet's run our first request! We are going to run a simple search for the word \"iphone\" as follows:\n\n```javascript\n\n// Build the request\nsem3.products.products_field( \"search\", \"iphone\" );\n\n// Run the request\nsem3.products.get_products(\n   function(err, products) {\n      if (err) {\n         console.log(\"Couldn't execute request: get_products\");\n         return;\n      }\n    // View results of the request\n    console.log( \"Results of request:\\n\" + JSON.stringify( products ) );\n   }\n);\n```\n\nAlternatively, you can send a raw JSON string\n```javascript\nvar endpoint = \"products\";\nvar method = \"GET\";\nvar jsonStr = '{\"search\" : \"nike\"}';\n\nsem3.run_query(endpoint, jsonStr, method, function(err, products) {\n    if (err) {\n        return console.error(\"Couldn't execute query: get_products\");\n    }\n    \n    console.log( products );\n});\n```\n\n\n\n## Sample Requests\n\nThe following requests show you how to interface with some of the core functionality of the Semantics3 Products API:\n\n### Pagination\n\nThe example in our \"Hello World\" script returns the first 10 results. In the following examples, we'll scroll to subsequent pages, beyond our initial request:\n\n\n```javascript\n// Build the request\nsem3.products.products_field( \"search\", \"iphone\" );\n\n// Run the request\nsem3.products.get_products(\n   function(err, products) {\n      if (err) {\n         console.log(\"Couldn't execute request: get_products\");\n         return;\n      }\n      \n      // View results of the request\n      console.log( \"Results of request:\\n\" + JSON.stringify( products ) );\n      \n      // Go to the next page\n      sem3.products.iterate_products(\n         function(err, products) {\n            if (err) {\n               console.log(\"Couldn't execute request: iterate_products\");\n               return;\n            }\n            console.log( \"Successfully retrieved next page of products:\\n\", JSON.stringify( products ) );\n         }\n      );\n   }\n);\n```\n\n### UPC Query\n\nRunning a UPC/EAN/GTIN query is as simple as running a search query:\n\n```javascript\n// Build the request\nsem3.products.products_field( \"upc\", \"883974958450\" );\nsem3.products.products_field( \"field\", [\"name\",\"gtins\"] );\nsem3.products.products_field( \"offset\", 1 );\n\n// Let's make a modification - say we no longer want the offset attribute\nsem3.products.remove( \"products\", \"offset\" );\n\n// Run the request\nsem3.products.get_products(\n   function(err, products) {\n      if (err) {\n         console.log(\"Couldn't execute request: get_products\");\n         return;\n      }\n    \n      // View the results of the request\n      console.log( \"Results of request:\\n\" + JSON.stringify( products ) );\n   }\n);\n```\n\n### URL Query\n\nGet the picture? You can run URL queries as follows:\n\n```javascript\nsem3.products.products_field( \"url\", \"http://www.walmart.com/ip/15833173\" );\nsem3.products.get_products(\n   function(err, products) {\n      if (err) {\n         console.log(\"Couldn't execute request: get_products\");\n         return;\n      }\n      console.log( \"Results of request:\\n\" + JSON.stringify( products ) );\n   }\n);\n```\n\n### Price Filter\n\nFilter by price using the \"lt\" (less than) tag:\n\n```javascript\nsem3.products.products_field( \"search\", \"iphone\" );\nsem3.products.products_field( \"price\", \"lt\", 30 );\nsem3.products.get_products(\n   function(err, products) {\n      if (err) {\n         console.log(\"Couldn't execute request: get_products\");\n         return;\n      }\n      console.log( \"Results of request:\\n\" + JSON.stringify( products ) );\n   }\n);\n```\n\n### Category ID Query\n\nTo lookup details about a cat_id, run your request against the categories resource:\n\n```javascript\nsem3.categories.categories_field( \"cat_id\", \"4992\" );\nsem3.categories.get_categories(\n   function(err, categories) {\n      if (err) {\n         console.log(\"Couldn't execute request: get_categories\");\n         return;\n      }\n      console.log( \"Results of request:\\n\" + JSON.stringify( categories ) );\n   }\n);\n```\n\n## Webhooks\nYou can use webhooks to get near-real-time price updates from Semantics3. \n\n### Creating a webhook\n\nYou can register a webhook with Semantics3 by sending a POST request to `\"webhooks\"` endpoint.\nTo verify that your URL is active, a GET request will be sent to your server with a `verification_code` parameter. Your server should respond with `verification_code` in the response body to complete the verification process.\n\n```javascript\nvar params = {\n    webhook_uri : \"http://mydomain.com/webhooks-callback-url\"\n};\n\nsem3.run_query(\"webhooks\", params, \"POST\", function(err, response){\n    if(err)\n        return console.error(err);\n\n    var webhookObject = JSON.parse(response);\n    console.log( webhookObject[ \"id\" ] );\n    console.log( webhookObject[ \"webhook_uri\" ] );\n});\n\n```\nTo fetch existing webhooks\n```javascript\nsem3.run_query(\"webhooks\", null, \"GET\", function(err, response){\n    if(err)\n        return console.error(err);\n\n    var webhooksArr = JSON.parse(response);\n    console.log( webhooksArr );\n});\n```\n\nTo remove a webhook\n```javascript\nvar webhook_id = '7JcGN81u';\nvar endpoint = \"webhooks/\" + webhook_id ;\n\nsem3.run_query( endpoint, null, \"DELETE\", function(err, response){\n    if(err)\n        return console.error(err);\n\n    console.log( response );\n});\n\n```\n\n### Registering events\nOnce you register a webhook, you can start adding events to it. Semantics3 server will send you notifications when these events occur.\nTo register events for a specific webhook send a POST request to the `\"webhooks/{webhook_id}/events\"` endpoint\n\n```javascript\nvar params = {\n    \"type\": \"price.change\",\n    \"product\": {\n        \"sem3_id\": \"1QZC8wchX62eCYS2CACmka\"\n    },\n    \"constraints\": {\n        \"gte\": 10,\n        \"lte\": 100\n    }\n};\n\nvar webhook_id = '7JcGN81u';\nvar endpoint = \"webhooks/\" + webhook_id + \"/events\";\n\nsem3.run_query(endpoint, params, \"POST\", function(err, response){\n    if(err)\n        return console.error(err);\n\n    var eventObject = JSON.parse(response);\n    console.log( eventObject[ \"id\" ] );\n    console.log( eventObject[ \"type\" ] );\n    console.log( eventObject[ \"product\" ] );\n});\n```\n\nTo fetch all registered events for a give webhook\n```javascript\nvar webhook_id = '7JcGN81u';\nvar endpoint = \"webhooks/\" + webhook_id + \"/events\";\n\nsem3.run_query(endpoint, null, \"GET\", function(err, response){\n    if(err)\n        return console.error(err);\n\n    var eventArr = JSON.parse(response);\n    console.log( eventArr );\n});\n```\n\n### Webhook Notifications\nOnce you have created a webhook and registered events on it, notifications will be sent to your registered webhook URI via a POST request when the corresponding events occur. Make sure that your server can accept POST requests. Here is how a sample notification object looks like\n```javascript\n{\n    \"type\": \"price.change\",\n    \"event_id\": \"XyZgOZ5q\",\n    \"notification_id\": \"X4jsdDsW\",\n    \"changes\": [{\n        \"site\": \"abc.com\",\n        \"url\": \"http://www.abc.com/def\",\n        \"previous_price\": 45.50,\n        \"current_price\": 41.00\n    }, {\n        \"site\": \"walmart.com\",\n        \"url\": \"http://www.walmart.com/ip/20671263\",\n        \"previous_price\": 34.00,\n        \"current_price\": 42.00\n    }]\n}\n```\n\n### Additional utility methods\n\n| method        | Description           \n| ------------- |:-------------\n| `sem3.products.get_results_json()`     | returns the result json string from the previous query\n| `sem3.products.clear()`                | clears all the fields in the query\n| `sem3.run_query(endpoint, rawJson, method, callback)`  | You can use this method to send raw JSON string in the request\n\n\n## Contributing\n\nUse GitHub's standard fork/commit/pull-request cycle.  If you have any questions, email <support@semantics3.com>.\n\n## Author\n\n* Sivamani VARUN <varun@semantics3.com>\n* GOVIND Chandrasekhar <govind@semantics3.com>\n* Nagappan Nachiappan <nagappan@semantics3.com>\n\n## Copyright\n\nCopyright (c) 2015 Semantics3 Inc.\n\n## License\n\n    The \"MIT\" License\n    \n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n    \n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n    \n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE.\n\n\n",
  "readmeFilename": "README.md",
  "gitHead": "6e53229b653bc14c7352c07c2100fefaa771932c",
  "bugs": {
    "url": "https://github.com/Semantics3/semantics3-node/issues"
  },
  "homepage": "https://github.com/Semantics3/semantics3-node#readme",
  "_id": "semantics3-node@0.0.3",
  "scripts": {},
  "_shasum": "34cf71285ab31c12c67f7870c1adbd9fe65e0eb5",
  "_from": "semantics3-node",
  "_resolved": "file:semantics3-node"
}
